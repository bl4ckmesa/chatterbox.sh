#! /bin/bash

setenv() {
	# Source in env
	[ -f "$SOURCEDIR/lib/env" ] && . "$SOURCEDIR/lib/env"
	
	# Source in library
	LIB="$SOURCEDIR/lib"
	[ -d $LIB ] && for lib in $LIB/*; do . $lib; done
	
	# File that tracks the last person to chat with the chatterbox
	export f="/Users/family/.chatterbox"
	[ -f $f ] && . $f
}

# $1 - Desired variable name/command
# $2 - [Optional] var type (int|str)
getinput() {
	read varname vartype <<< $@
	read input
	while [[ -z "$input" ]]; do
		read input
	done
	# Check/run commands until there aren't any left
	while checkforcommands $input; do
		echo "Still a command"
		read input
	done
	# Say the input out loud; makes it more conversational
    [[ -x /usr/bin/say && "$NOSAY" == "" ]] && say -v Junior $input 2>/dev/null

	# Declared variable types
	if [ -n "$vartype" ]; then
		# If it's supposed to be an int, make sure it is; otherwise ask again.
		if [ "$vartype" == "int" ]; then
			if [[ ! $input =~ ^[0-9]+$ ]]; then
				chatter "That's not even a number; try again."
				getinput $varname $vartype
			elif [ ${#input} -gt 20 ]; then
				chatter "That number is way too big for me to understand; try again."
				getinput $varname $vartype
			fi
		#elif [ "$vartype" == "str" ]; then
		fi
	fi

	eval $varname=\"$input\"
}

checkforcommands() {
	# Check to see if the input is a command.  If so, run the command.
	# If not, return false and continue
	cmd=$@
	case $cmd in
		exit|quit|leave|bye)
			chatter "Goodbye!"
			exit
		;;
		randomflag)
			chatter "Setting Random flag."
			export RANDOMFLAG=true
			return 0
		;;
		checkrandomflag)
			chatter "Random flag is currently: $RANDOMFLAG."
			return 0
		;;
		*)
			# Not a command; return false
			return 1
		;;
	esac
}

playgame() {
	chatter "Well, I only know this one game: Guess the Number.  Do you want to play it?"
	while yes; do
		guessthenumber
		chatter "Shall we play another?"
	done
}

chatter() {
	echo $@
	[[ -x /usr/bin/say && "$NOSAY" == "" ]] && /usr/bin/say $@ 2>/dev/null
	return 0 # Make sure it exits this function cleanly
}

yes() {
	getinput yesno
	if [[ "$yesno" =~ (^yes$|^y$|^Y$|^Yes$) ]]; then
		return 0
	elif [[ "$yesno" =~ (^no$|^n$|^N$|^No$) ]]; then
		return 1
	else
		chatter "Please answer 'yes' or 'no': "
		yesno
		return $?
	fi
}

guessthenumber() {
	chatter "Okay, let's play Guess the Number."
	chatter "How high do you want to go?"
	getinput highnumber
	local number=$(( RANDOM % highnumber + 1 ))
	chatter "Okay, I'm thinking of a number."
	getinput guessednumber int
	local guesses=1
	while [ "$guessednumber" -ne "$number" ]; do
		if [ "$guessednumber" -lt "$number" ]; then
			chatter "That was too low."
		elif [ "$guessednumber" -gt "$number" ]; then
			chatter "That was too high."
		else
			chatter "Something broke." && exit 1
		fi		
		((guesses++))
		getinput guessednumber int
	done
	chatter "That was right!"
	chatter "You got the answer in $guesses guesses."
}





